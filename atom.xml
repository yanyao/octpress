<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[YanYa0]]></title>
  <link href="http://yanyao.github.io/octpress/atom.xml" rel="self"/>
  <link href="http://yanyao.github.io/octpress/"/>
  <updated>2014-06-27T18:20:22+08:00</updated>
  <id>http://yanyao.github.io/octpress/</id>
  <author>
    <name><![CDATA[yanyao]]></name>
    
  </author>

  
  <entry>
    <title type="html"><![CDATA[how to configure m/monit]]></title>
    <link href="http://yanyao.github.io/octpress/blog/2014/03/06/how-to-configure-m-slash-monit/"/>
    <updated>2014-03-06T10:36:54+08:00</updated>
    <id>http://yanyao.github.io/octpress/blog/2014/03/06/how-to-configure-m-slash-monit</id>
    <content type="html"><![CDATA[<p>M/Monit这边只需要启动就可以</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>wget http://www.mmonit.com/dist/mmonit-3.1.2-macosx-universal.tar.gz
</span><span class='line'>tar xfz mmonit-3.1.2-macosx-universal.tar.gz
</span><span class='line'><span class="nb">cd </span>mmonit-3.1.2
</span><span class='line'>./mmonit
</span></code></pre></td></tr></table></div></figure>


<p>Monit需要更改指向该M/Monit的配置，配置在<em>/etc/monit.conf</em>.主要需要指定M/Monit的地址</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">set </span>httpd port 2812
</span><span class='line'>    allow &lt;mmonit ip&gt;
</span><span class='line'>    allow localhost
</span><span class='line'>    allow admin:monit      <span class="c"># require user &#39;admin&#39; with password &#39;monit&#39;</span>
</span><span class='line'>    allow @monit           <span class="c"># allow users of group &#39;monit&#39; to connect (rw)</span>
</span><span class='line'>    allow @users <span class="nb">readonly</span>  <span class="c"># allow users of group &#39;users&#39; to connect readonly</span>
</span><span class='line'><span class="nb">set </span>mmonit http://monit:monit@&lt;mmonit ip&gt;:8080/collector
</span></code></pre></td></tr></table></div></figure>


<hr />

<p>对于Monit,可以通过<code>monit</code>命令来打开或者关闭对于某个服务的监控</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>monit monitor &lt;name&gt;
</span><span class='line'>monit unmonitor &lt;name&gt;
</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[knife-solo]]></title>
    <link href="http://yanyao.github.io/octpress/blog/2014/02/11/knife-solo/"/>
    <updated>2014-02-11T17:54:24+08:00</updated>
    <id>http://yanyao.github.io/octpress/blog/2014/02/11/knife-solo</id>
    <content type="html"><![CDATA[<p><code>knife-solo</code>
是knife的一个插件。主要是用在没有chef-server的情况下，代替一部分chef-server的功能。其实本质就是将chef中的cookbook、data bag、roles的信息传递给chef-client，之后再调用目标节点上的<code>chef-solo</code>程序。<code>knife-solo</code>本身主要包括以下三个命令：</p>

<p><em><code>knife solo init DIRECTORY</code></em></p>

<p>用来设置knife-solo的工作环境，这个命令需要一个目录作为输入.这个命令的作用类似于chef构架中的workstation. 所以在这个目录上，我们可以调用<code>knife</code>源生命令<code>cookbook</code>、<code>data bag</code>以及<code>role</code>。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nv">$knife</span> solo init solo
</span><span class='line'><span class="nv">$tree</span> solo
</span><span class='line'>.
</span><span class='line'>├── cookbooks
</span><span class='line'>├── data_bags
</span><span class='line'>├── nodes
</span><span class='line'>├── roles
</span><span class='line'>├── site-cookbooks
</span><span class='line'>└── solo.rb
</span></code></pre></td></tr></table></div></figure>


<p><em><code>knife solo prepare user@hostname</code></em></p>

<p><code>prepare</code>命令主要是在目标节点上安装<code>chef-client</code>。这个命令之后就需要给该节点制定一个<code>run_list</code>了。在<code>knife
sole
init</code>之后，会产生一个<code>nodes</code>的目录，该目录将要存放各个目标节点的<code>run_list</code>的配置文件。节点对应的文件是该节点的IP地址或者主机名命名的。例如主机<code>192.168.1.33</code>所对应的文件是<code>nodes/192.168.1.33.json</code>。该文件是json格式的。</p>

<pre><code>    {"run_list":["recipe[test]"]}
</code></pre>

<p>该配置只包含了一个recipe，多个recipe或者role都可以添加在里面。</p>

<p><em><code>knife solo cook user@hostname</code></em></p>

<p><code>cook</code>
命令主要是在目标节点上执行<code>chef-solo</code>命令。也就是将<code>run_list</code>里面对应的cookbook展开，实现cookbook定义的行为。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[how to configure HDMI in Black MacOS]]></title>
    <link href="http://yanyao.github.io/octpress/blog/2014/02/07/how-to-configure-hdmi-in-black-macos/"/>
    <updated>2014-02-07T21:22:50+08:00</updated>
    <id>http://yanyao.github.io/octpress/blog/2014/02/07/how-to-configure-hdmi-in-black-macos</id>
    <content type="html"><![CDATA[<p>从Lion发布就一直使用黑苹果了。当时也是根据tonymacx86上面的推荐配置，基本所有的硬件都有驱动。包括声卡、显卡、网卡。因为家里有两个显示设备，一个是用了多年的Dell
2007FP，另外还有一个Sony
24寸的电视。一直都想把两个显示设备都利用上，显然会大大提高工作效率。所以当初买显卡的时候一定要选择支持多显示支持的，至少可以一个通过DVI输出到Dell的显示器上，另外通过HDMI输出到Sony的电视上。其实这个功能在Lion已经实现了。但是一直没法通过HDMI将Mac的声音输出到电视上。以前也没有觉得有什么不方便，因为平时也不会经常使用电脑来听音乐。但是这个唯一在黑苹果上没有实现的硬件功能，总是一直都是遗憾。趁假期还有一些时间，今天又重新燃起了解决这个两年多没有解决问题的念头。我的硬件配置主要为：</p>

<blockquote>
Intel Core i7 2700K</br>
HIS 6870 IceQ Turbo 1GB DDR5</br>
Gigabyte Z77-DS3H</br>
</blockquote>


<p>主板是Intel
7系列,但是我的CPU却是2700.也就是说主板和cpu不是一代产品。主板比CPU高一个版本。</p>

<!-- more -->


<p>HDMI可以工作的核心操作是通过修改DSDT，来让OSX识别显卡的HDMI设备。下面具体的步骤参考tonymacx86大神toleda的<a href="https://github.com/toleda/audio_hdmi_hd4000">github</a>.
需要说明以下几点：</br>
</br>
1. Gigabyte的主板不需要DSDT，所以需要通过MaciASL获得当前的DSDT</br>
&ndash;> MaciASL/File/New from ACPI/DSDT </br>
2. MaciASL可能编译有错误。这时候可能需要手动更改代码</br>
3. MaciASL patch需要打两个。分别为&#8221;AMI-EFI/Clean
   Compile&#8221;和&#8221;AMI-AMD-Nvida-7_Series-A1&#8221;。 Patch窗口如下图所示：</br></p>

<p><img src="http://yanyao.github.io/octpress/images/MaciASL.png" title="&#34;MaciASL Patch Windows&#34;" alt="&#34;MaciASL Patch Windows&#34;"></p>

<p>最终的dsdt点击<a href="http://yanyao.github.io/octpress/raw_files/dsdt.aml">这里</a></p>

<p>Patch结束后，需要保存为/Extra/dsdt.aml, 重启机器后在&#8217;System
Preferences&#8217;&ndash;>&lsquo;Sound&#8217;里可以看到新的HDMI设备。</p>

<p><img src="http://yanyao.github.io/octpress/images/os_sound_hdmi.png" title="&#34;Sound Windows&#34;" alt="&#34;Sound Windows&#34;"></p>

<p>这下终于可以通过电视的喇叭来听音乐了。:&ndash;></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to use Octopress Vim Plugin - vim-octopress]]></title>
    <link href="http://yanyao.github.io/octpress/blog/2014/02/07/how-to-use-octopress-vim-plugin-vim-octopress/"/>
    <updated>2014-02-07T15:04:38+08:00</updated>
    <id>http://yanyao.github.io/octpress/blog/2014/02/07/how-to-use-octopress-vim-plugin-vim-octopress</id>
    <content type="html"><![CDATA[<p>octopress的vim插件本身比较轻量。主要是对Markdown格式的高亮和一些Octopress
常用rake命令的集成. 下面是安装vim-Octopress 的一些简单步骤.</p>

<figure class='code'><figcaption><span>&#8216;Install vim-octopress&#8217;</span><a href='https://github.com/tangledhelix/vim-octopress'>link</a></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'><span class="nb">cd</span> ~/.vim/bundle/
</span><span class='line'>git clone https://github.com/tangledhelix/vim-octopress
</span></code></pre></td></tr></table></div></figure>


<p>下载之后，需要在.vimrc中加入</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>autocmd BufNewFile,BufRead *.markdown,*.textile set filetype=octopress</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
